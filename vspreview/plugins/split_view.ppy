from __future__ import annotations

from vstools import check_variable, depth, split, stack_clips, vs

from vspreview.plugins import MappedNodesViewPlugin, PluginConfig

__all__ = [
    'SplitPlanesViewPlugin'
]


class SplitPlanesViewPlugin(MappedNodesViewPlugin):
    _config = PluginConfig('dev.setsugen.split_planes', 'Split Planes')

    def get_node(self, node: vs.VideoNode) -> vs.VideoNode:
        assert check_variable(node, self.get_node)

        if node.format.color_family is vs.GRAY:
            return node
        
        planes = split(node)
        
        if node.format.sample_type is vs.FLOAT:
            fmt = node.format.replace(bits_per_sample=32)

            if node.format.color_family is vs.YUV:
                planes = [
                    plane.std.Expr('x 0.5 +' if i else 'x', fmt)
                    for i, plane in enumerate(planes)
                ]
            elif node.format.bits_per_sample != 32:
                planes = [depth(plane, fmt) for plane in planes]

        planes = [c.text.Text(text=k) for k, c in zip(node.format.name, planes)]

        subsampling = node.format.subsampling_w, node.format.subsampling_h

        org: list[vs.VideoNode | list[vs.VideoNode | list[vs.VideoNode]]] = planes

        if subsampling in ((2, 2), (2, 0)):
            middle = [
                planes[1].std.BlankClip(),
                *planes[1:],
                planes[1].std.BlankClip()
            ]

            org = [planes[0], middle]
        elif subsampling != (0, 0):
            org = [planes[0], planes[1:]]

        if subsampling[1] == 0:
            org = [org]

        return stack_clips(org)
